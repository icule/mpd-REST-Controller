package iculesgate.mpd_controller.client;

import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import iculesgate.mpd_controller.configuration.ConfigurationManager;
import iculesgate.mpd_controller.data.Tag;

import javax.inject.Inject;
import javax.swing.*;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import java.awt.*;
import java.io.IOException;

/**
 * Created by icule on 26/02/17.
 */
public class Main {

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 9, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, BorderLayout.NORTH);
        infoButton = new JButton();
        infoButton.setText("Info");
        panel2.add(infoButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        nextButton = new JButton();
        nextButton.setText("Next");
        panel2.add(nextButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playButton = new JButton();
        playButton.setText("Play");
        panel2.add(playButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pauseButton = new JButton();
        pauseButton.setText("Pause");
        panel2.add(pauseButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setText("Stop");
        panel2.add(stopButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel2.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        tagComboBox = new JComboBox();
        panel2.add(tagComboBox, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagButton = new JButton();
        tagButton.setText("Tag");
        panel2.add(tagButton, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dataArea = new JTextArea();
        dataArea.setColumns(50);
        dataArea.setRows(4);
        panel1.add(dataArea, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private static class ClientModule extends AbstractModule {
        @Override
        protected void configure() {
            bind(ConfigurationManager.class);
            bind(Main.class);
        }
    }

    private WebTarget targetPlayer;
    private WebTarget targetTag;
    private JPanel panel1;
    private JTextArea dataArea;
    private JButton infoButton;
    private JButton nextButton;
    private JButton playButton;
    private JButton pauseButton;
    private JButton stopButton;
    private JComboBox<Tag> tagComboBox;
    private JButton tagButton;

    private void updateMusicData() {
        String res = targetPlayer.path("music").request().get(String.class);
        dataArea.setText(res);
    }

    @Inject
    public Main(ConfigurationManager configurationManager) {
        Client c = ClientBuilder.newClient();
        targetPlayer = c.target("http://" + configurationManager.getCompleteUrl() + "/player/" + configurationManager.getAuthToken());
        targetTag = c.target("http://" + configurationManager.getCompleteUrl() + "/tag/" + configurationManager.getAuthToken());


        JFrame frame = new JFrame("Mpd controller");

        infoButton.addActionListener(actionEvent -> updateMusicData());

        nextButton.addActionListener(actionEvent -> {
            targetPlayer.path("next").request().put(Entity.text(""), String.class);
            updateMusicData();
        });

        playButton.addActionListener(actionEvent -> {
            targetPlayer.path("play").request().put(Entity.text(""), String.class);
            updateMusicData();
        });

        pauseButton.addActionListener(actionEvent -> {
            targetPlayer.path("pause").request().put(Entity.text(""), String.class);
            updateMusicData();
        });

        stopButton.addActionListener(actionEvent -> {
            targetPlayer.path("stop").request().put(Entity.text(""), String.class);
            updateMusicData();
        });

        for (Tag t : Tag.values()) {
            tagComboBox.addItem(t);
        }

        tagButton.addActionListener(actionEvent -> {
            targetTag.path("tag").request().post(Entity.text(((Tag) tagComboBox.getSelectedItem()).toString()));
            updateMusicData();
        });

        frame.add(panel1);

        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }


    public static void main(String args[]) throws IOException {
        Injector injector = Guice.createInjector(new ClientModule());
        injector.getInstance(ConfigurationManager.class).loadConfiguration("config.properties");
        Main m = injector.getInstance(Main.class);
    }

}
